import os
from app.const import ENVIRONMENT


class Config(object):
    VERSION = "2018-10.0"
    WEBSOCKET_URI = "wss://stream.binance.com:9443"

    # after this many seconds data will become stale; blocking execution on it.
    STALE_TIMEOUT = 0.2

    ALL_MARKETS = [
        "ETHBTC",
        "LTCBTC",
        "BNBBTC",
        "NEOBTC",
        "QTUMETH",
        "EOSETH",
        "SNTETH",
        "BNTETH",
        "GASBTC",
        "BTCUSDT",
        "ETHUSDT",
        "HSRBTC",
        "OAXETH",
        "DNTETH",
        "MCOETH",
        "ICNETH",
        "MCOBTC",
        "WTCBTC",
        "WTCETH",
        "LRCBTC",
        "LRCETH",
        "QTUMBTC",
        "YOYOBTC",
        "OMGBTC",
        "OMGETH",
        "ZRXBTC",
        "ZRXETH",
        "STRATBTC",
        "STRATETH",
        "SNGLSBTC",
        "SNGLSETH",
        "BQXBTC",
        "BQXETH",
        "KNCBTC",
        "KNCETH",
        "FUNBTC",
        "FUNETH",
        "SNMBTC",
        "SNMETH",
        "NEOETH",
        "IOTABTC",
        "IOTAETH",
        "LINKBTC",
        "LINKETH",
        "XVGBTC",
        "XVGETH",
        "MDABTC",
        "MDAETH",
        "MTLBTC",
        "MTLETH",
        "SUBBTC",
        "SUBETH",
        "EOSBTC",
        "SNTBTC",
        "ETCETH",
        "ETCBTC",
        "MTHBTC",
        "MTHETH",
        "ENGBTC",
        "ENGETH",
        "DNTBTC",
        "ZECBTC",
        "ZECETH",
        "BNTBTC",
        "ASTBTC",
        "ASTETH",
        "DASHBTC",
        "DASHETH",
        "OAXBTC",
        "ICNBTC",
        "BTGBTC",
        "BTGETH",
        "EVXBTC",
        "EVXETH",
        "REQBTC",
        "REQETH",
        "VIBBTC",
        "VIBETH",
        "HSRETH",
        "TRXBTC",
        "TRXETH",
        "POWRBTC",
        "POWRETH",
        "ARKBTC",
        "ARKETH",
        "YOYOETH",
        "XRPBTC",
        "XRPETH",
        "MODBTC",
        "MODETH",
        "ENJBTC",
        "ENJETH",
        "STORJBTC",
        "STORJETH",
        "KMDBTC",
        "KMDETH",
        "RCNBTC",
        "RCNETH",
        "NULSBTC",
        "NULSETH",
        "RDNBTC",
        "RDNETH",
        "XMRBTC",
        "XMRETH",
        "DLTBTC",
        "DLTETH",
        "AMBBTC",
        "AMBETH",
        "BATBTC",
        "BATETH",
        "BCPTBTC",
        "BCPTETH",
        "ARNBTC",
        "ARNETH",
        "GVTBTC",
        "GVTETH",
        "CDTBTC",
        "CDTETH",
        "GXSBTC",
        "GXSETH",
        "NEOUSDT",
        "POEBTC",
        "POEETH",
        "QSPBTC",
        "QSPETH",
        "BTSBTC",
        "BTSETH",
        "XZCBTC",
        "XZCETH",
        "LSKBTC",
        "LSKETH",
        "TNTBTC",
        "TNTETH",
        "FUELBTC",
        "FUELETH",
        "MANABTC",
        "MANAETH",
        "BCDBTC",
        "BCDETH",
        "DGDBTC",
        "DGDETH",
        "ADXBTC",
        "ADXETH",
        "ADABTC",
        "ADAETH",
        "PPTBTC",
        "PPTETH",
        "CMTBTC",
        "CMTETH",
        "XLMBTC",
        "XLMETH",
        "CNDBTC",
        "CNDETH",
        "LENDBTC",
        "LENDETH",
        "WABIBTC",
        "WABIETH",
        "LTCETH",
        "LTCUSDT",
        "TNBBTC",
        "TNBETH",
        "WAVESBTC",
        "WAVESETH",
        "GTOBTC",
        "GTOETH",
        "ICXBTC",
        "ICXETH",
        "OSTBTC",
        "OSTETH",
        "ELFBTC",
        "ELFETH",
        "AIONBTC",
        "AIONETH",
        "NEBLBTC",
        "NEBLETH",
        "BRDBTC",
        "BRDETH",
        "EDOBTC",
        "EDOETH",
        "WINGSBTC",
        "WINGSETH",
        "NAVBTC",
        "NAVETH",
        "LUNBTC",
        "LUNETH",
        "TRIGBTC",
        "TRIGETH",
        "APPCBTC",
        "APPCETH",
        "VIBEBTC",
        "VIBEETH",
        "RLCBTC",
        "RLCETH",
        "INSBTC",
        "INSETH",
        "PIVXBTC",
        "PIVXETH",
        "IOSTBTC",
        "IOSTETH",
        "CHATBTC",
        "CHATETH",
        "STEEMBTC",
        "STEEMETH",
        "NANOBTC",
        "NANOETH",
        "VIABTC",
        "VIAETH",
        "BLZBTC",
        "BLZETH",
        "AEBTC",
        "AEETH",
        "RPXBTC",
        "RPXETH",
        "NCASHBTC",
        "NCASHETH",
        "POABTC",
        "POAETH",
        "ZILBTC",
        "ZILETH",
        "ONTBTC",
        "ONTETH",
        "STORMBTC",
        "STORMETH",
        "QTUMUSDT",
        "XEMBTC",
        "XEMETH",
        "WANBTC",
        "WANETH",
        "WPRBTC",
        "WPRETH",
        "QLCBTC",
        "QLCETH",
        "SYSBTC",
        "SYSETH",
        "GRSBTC",
        "GRSETH",
        "ADAUSDT",
        "CLOAKBTC",
        "CLOAKETH",
        "GNTBTC",
        "GNTETH",
        "LOOMBTC",
        "LOOMETH",
        "XRPUSDT",
        "BCNBTC",
        "BCNETH",
        "REPBTC",
        "REPETH",
        "TUSDBTC",
        "TUSDETH",
        "ZENBTC",
        "ZENETH",
        "SKYBTC",
        "SKYETH",
        "EOSUSDT",
        "CVCBTC",
        "CVCETH",
        "THETABTC",
        "THETAETH",
        "TUSDUSDT",
        "IOTAUSDT",
        "XLMUSDT",
        "IOTXBTC",
        "IOTXETH",
        "QKCBTC",
        "QKCETH",
        "AGIBTC",
        "AGIETH",
        "NXSBTC",
        "NXSETH",
        "DATABTC",
        "DATAETH",
        "ONTUSDT",
        "TRXUSDT",
        "ETCUSDT",
        "ICXUSDT",
        "SCBTC",
        "SCETH",
        "NPXSBTC",
        "NPXSETH",
        "VENUSDT",
        "KEYBTC",
        "KEYETH",
        "NASBTC",
        "NASETH",
    ]

    MARKETS = {
        "BTCUSDT",
        "IOTAUSDT",
        "EOSUSDT",
        "XRPUSDT",
        "LTCUSDT",
        "ETCUSDT",
        "NEOUSDT",
        "ADABTC",
        "IOTABTC",
        "BTGBTC",
        "XEMBTC",
        "ZRXBTC",
        "WTCBTC",
        "EOSBTC",
        "XRPBTC",
        "LTCBTC",
        "XLMBTC",
        "NEOBTC",
        "DASHBTC",
        "XMRBTC",
        "STRATBTC",
        "TRXBTC",
        "XVGBTC",
        "QTUMBTC",
        "EOSETH",
        "TRXETH",
        "IOTAETH",
        "ETCETH",
        "ZRXETH",
        "ADAETH",
        "LTCETH",
        "SALTBTC",
    }


class DryRun(Config):
    MODE = "dry"

    # READONLY
    API_PUB = "qzNYUeOSs7PKGhVQrb6gcjk4FQvdaRKmOiuRBPNvymi8rcCuYevPAza2T3WBLtWT"
    API_PRI = "bfBWAZddzBwgqE8qOEWoIygjJuvJaCOHvGXEsxhyksy5Apv2valGGRtEnGfYeXhm"

    POSTGRES_CONNECT_STRING = (
        "postgresql://livermore:livermoreballing@dckrpostgres:5432/livermore"
    )

    ZMQ_TOPIC = b""
    ZMQ_SOCKET = b"tcp://127.0.0.1:5678"

    ORDER_CHECK_INTERVAL = 0.200  # 200ms

    EXECUTE = False
    EXECUTE_IP = "0.0.0.0"


class Production(Config):
    MODE = "production"

    API_PUB = os.environ.get("API_PUB", "")
    API_PRI = os.environ.get("API_PRI", "")

    POSTGRES_CONNECT_STRING = "postgresql://xd"

    ZMQ_TOPIC = b""
    ZMQ_SOCKET = b"tcp://127.0.0.1:5678"

    ORDER_CHECK_INTERVAL = 0.040  # 40ms

    EXECUTE = True
    EXECUTE_IP = "0.0.0.0"


confd = {"dry": DryRun, "production": Production}


def get_config(config):
    return confd[config]


CONFIG = get_config(ENVIRONMENT)
